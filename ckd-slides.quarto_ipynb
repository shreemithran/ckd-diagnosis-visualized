{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Predicting Chronic Kidney Disease\"\n",
        "subtitle: \"with Machine Learning & Visual Analytics\"\n",
        "author: \"Shreemithra Naveen and Sai Laasya Gorantla\"\n",
        "date: \"17 April 2025\"\n",
        "title-slide-attributes:\n",
        "      data-background-image: images/background_image1.png\n",
        "      data-background-size: cover\n",
        "      data-background-opacity: \"0.6\"\n",
        "theme: serif\n",
        "format:\n",
        "  revealjs:    \n",
        "    slide-number: true\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "jupyter: python3\n",
        "editor: visual\n",
        "execute:\n",
        "  warning: false\n",
        "  message: false\n",
        "  echo: false\n",
        "---"
      ],
      "id": "da934f61"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: load-packages\n",
        "#| include: false\n",
        "\n",
        "#Importing libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC"
      ],
      "id": "load-packages",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: load-data-and-preprocessing\n",
        "#| include: false\n",
        "disease = pd.read_csv('kidney_disease.csv')\n",
        "\n",
        "#Dropping off the column 'id'\n",
        "disease = disease.drop('id', axis = 1)\n",
        "\n",
        "#Renaming the columns for easy understanding the column and dataset clearly\n",
        "disease.columns = ['age', 'blood_pressure', 'specific_gravity', 'albumin', 'sugar', 'red_blood_cells', 'pus_cell',\n",
        "'pus_cell_clumps', 'bacteria', 'blood_glucose_random', 'blood_urea', 'serum_creatinine', 'sodium','potassium', 'haemoglobin', 'packed_cell_volume', 'white_blood_cell_count', 'red_blood_cell_count',\n",
        "'hypertension', 'diabetes_mellitus', 'coronary_artery_disease', 'appetite', 'peda_edema','aanemia', 'class']\n",
        "\n",
        "#Converting the column, the errors is applied for not considering the NA values\n",
        "disease[['packed_cell_volume', 'white_blood_cell_count', 'red_blood_cell_count']] = disease[['packed_cell_volume', 'white_blood_cell_count', 'red_blood_cell_count']].apply(pd.to_numeric, errors = 'coerce')\n",
        "\n",
        "#As the 6-7 columns has just 1,2 or 4 missing values\n",
        "disease.dropna(subset=['hypertension', 'diabetes_mellitus','coronary_artery_disease','appetite', 'peda_edema','aanemia', 'bacteria', 'pus_cell_clumps'], inplace = True)\n",
        "\n",
        "#disease.isna().sum()\n",
        "\n",
        "categorical_null = ['red_blood_cells', 'pus_cell']\n",
        "\n",
        "values = ['normal', 'abnormal']\n",
        "for feature in categorical_null:\n",
        "    print(disease[feature].unique(), disease[feature].isna().sum())\n",
        "    disease[feature].fillna(random.choice(values), inplace=True)\n",
        "\n",
        "categorical = disease.select_dtypes(include = 'object')\n",
        "categorical.columns \n",
        "\n",
        "## Replacing the incorrect values - cleaning\n",
        "\n",
        "# Clean 'diabetes_mellitus' column\n",
        "disease['diabetes_mellitus']= disease['diabetes_mellitus'].replace(to_replace={'\\tno': 'no', '\\tyes': 'yes', ' yes': 'yes'})\n",
        "disease['coronary_artery_disease'] = disease['coronary_artery_disease'].replace(to_replace='\\tno',value='no')\n",
        "disease['class'] = disease['class'].replace(to_replace={'ckd\\t': 'ckd'})\n",
        "\n",
        "#Converting the class to the numerical column and also assigning binary values\n",
        "disease['class'] = disease['class'].map({'ckd': 0, 'notckd': 1})\n",
        "disease['class'] = pd.to_numeric(disease['class'], errors='coerce')\n",
        "\n",
        "#plt.figure(figsize=(15,15))\n",
        "#for i,col_name in enumerate(categorical.columns, start = 1):\n",
        "#    plt.subplot(5,5,i)\n",
        "#    sns.countplot(x = disease[col_name])\n",
        "#plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "#Fetching the numerical columns\n",
        "numerical_columns = disease.select_dtypes(exclude = 'object')\n",
        "\n",
        "#plt.figure(figsize=(15,15))\n",
        "#sns.pairplot(numerical_columns)\n",
        "#plt.show()"
      ],
      "id": "load-data-and-preprocessing",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Project Overview {.center}\n",
        "\n",
        "- Over **850 million people worldwide** have kidney diseases — more than diabetes and cancer combined.\n",
        "- **1 in 10 people globally** are affected by CKD.\n",
        "- CKD is the **8th leading cause of death** worldwide (WHO, 2020).\n",
        "\n",
        "<span style=\"font-size: 0.65em; color: #555;\">\n",
        "Source: World Health Organization (WHO), 2020 – <a href=\"https://www.who.int/news-room/fact-sheets/detail/kidney-disease\">Global Facts on CKD</a>\n",
        "</span>\n",
        "\n",
        "\n",
        "# Silent & Dangerous\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "<!-- Upper half text -->\n",
        "<div style=\"text-align: center; font-size: 0.7em; margin-bottom: 2vh;\">\n",
        "  <p>CKD often has no symptoms in early stages — making it a “silent disease\".By the time symptoms appear, <strong>irreversible damage</strong> may have occurred.</p>\n",
        "</div>\n",
        "\n",
        "<!-- lower half text -->\n",
        "\n",
        ":::{.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n"
      ],
      "id": "29b9ce4c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: piechart-ckdvsnoncks\n",
        "\n",
        "labels = ['Unaware of CKD', 'Aware of CKD']\n",
        "sizes = [90, 10]\n",
        "colors = ['#f4a261', '#2a9d8f']\n",
        "fig, ax = plt.subplots(figsize=(3.9, 3.9), facecolor='none')\n",
        "ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n",
        "ax.set_facecolor('none')   \n",
        "plt.axis('equal')          \n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "piechart-ckdvsnoncks",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<p style=\"text-align: center; font-size: 0.50em; color: #444;\">\n",
        "<b>U.S. Perspective:</b><br>\n",
        "9 out of 10 people with CKD are unaware they have it.<br>\n",
        "<em>— American Kidney Fund</em>\n",
        "</p>\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n"
      ],
      "id": "083b238a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: piechart-terminalstage\n",
        "\n",
        "labels = ['Terminal Stage', 'Early Stage']\n",
        "sizes = [72.5, 27.5]\n",
        "colors = ['#ba2f2f', '#87ceeb']\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(4, 4), facecolor='none')\n",
        "ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n",
        "ax.set_facecolor('none')\n",
        "plt.axis('equal')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "piechart-terminalstage",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<p style=\"text-align: center; font-size: 0.50em; color: #444;\">\n",
        "<b>Global Perspective:</b><br>\n",
        "72.5% of patients were diagnosed at the terminal stage,  \n",
        "and 75% had never heard of CKD before hospitalization.<br>\n",
        "<em>— Brazzaville Hospital Study</em>\n",
        "</p>\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "<div style=\"text-align: center; font-size: 0.6em; color: #666; margin-top: 1em;\">\n",
        "  Source: \n",
        "  <a href=\"https://www.kidneyfund.org\" target=\"_blank\">AKF</a> · \n",
        "  <a href=\"https://indexmedicus.afro.who.int/iah/fulltext/Chronic%20Renal%20Failure...\" target=\"_blank\">Brazzaville Study</a>\n",
        "</div>\n",
        "\n",
        "\n",
        "#  <span style=\"font-size: 0.6em;\">Why Early Detection Matters?</span>\n",
        "\n",
        "<p style=\"text-align: center; font-size: 0.70em; color: #444;\">\n",
        "That’s why we decided to build a <b>machine learning model</b> to assist in <b>early detection of CKD</b>, even during routine checkups — helping patients become aware of their symptoms and risks <b>before it’s too late</b><br>\n",
        "</p>\n",
        "\n",
        "<p style=\"text-align: center; font-size: 0.60em; color: #444;\">\n",
        "<b>Early detection enables:</b><br>\n",
        "  - Slowing or halting disease progression<br>\n",
        "  - Improved quality of life<br>\n",
        "  - Reduced need for dialysis or transplant<br>\n",
        "</p>\n",
        "\n",
        "---\n",
        "\n",
        "##  <span style=\"font-size: 0.8em;\">Dataset Overview</span>\n",
        "\n",
        "\n",
        "<p style=\"text-align: left; font-size: 0.60em; color: #444;\">\n",
        "    - Dataset: Chronic Kidney Disease dataset from [Kaggle](https://www.kaggle.com/datasets/mansoordaku/ckdisease)<br>\n",
        "    - 400 patient records with 26 clinical features<br>\n",
        "    - Target variable: `class` → CKD or not CKD<br>\n",
        "</p>\n",
        "\n",
        "  <p style=\"text-align: left; font-size: 0.90em; color: #444; margin: 0;\">\n",
        "    • Includes essential CKD indicators: albumin, creatinine, hemoglobin, BP<br>\n",
        "    • One of the few public datasets with complete labels + clinical features<br>\n",
        "    • Ideal for building a clear, interpretable ML model\n",
        "  </p>\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## <span style=\"font-size: 0.8em;\">Categorical Features in the Dataset</span>\n",
        "\n",
        "<p style=\"font-size: 0.70em; text-align: center; color: #444;\">\n",
        "This chart reveals how categorical variables like anemia, appetite, and diabetes are distributed across the patient records — helping us understand the clinical profiles common in CKD cases.\n",
        "</p>\n"
      ],
      "id": "cc0890ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Distribution-of-Categorical-Features\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "categorical = categorical.drop(columns='class')\n",
        "\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.rcParams['axes.facecolor'] = 'none'\n",
        "plt.rcParams['figure.facecolor'] = 'none'\n",
        "plt.figure(figsize=(20, 18))\n",
        "\n",
        "for i, col_name in enumerate(categorical.columns, start=1):\n",
        "    plt.subplot(5, 5, i)\n",
        "    sns.countplot(x=disease[col_name], hue=disease[col_name], palette=\"Set2\", legend=False)\n",
        "    plt.title(col_name.replace(\"_\", \" \").capitalize(), fontsize= 16, fontweight='bold')\n",
        "    plt.xticks(fontsize=12)\n",
        "    plt.yticks(fontsize=12)\n",
        "    plt.xlabel(\"\")\n",
        "    plt.ylabel(\"Count\", fontsize=12)\n",
        "\n",
        "plt.suptitle(\"Distribution of Categorical Features in CKD Dataset\", fontsize=18, fontweight='bold', y=1.02)\n",
        "plt.subplots_adjust(hspace=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "Distribution-of-Categorical-Features",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n"
      ],
      "id": "66095a09"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Distribution-of-numerical-Features\n",
        "\n",
        "numerical = disease.select_dtypes(include=['float64', 'int64'])\n",
        "numerical = numerical.drop(columns=['class','specific_gravity', 'packed_cell_volume'])\n",
        "\n",
        "disease['class_label'] = disease['class'].map({1: 'CKD', 0: 'Non-CKD'})\n",
        "\n",
        "custom_palette = {'CKD': '#e74c3c', 'Non-CKD': '#2ecc71'}\n",
        "\n",
        "cols = 6\n",
        "rows = (len(numerical.columns) + cols - 1) // cols\n",
        "\n",
        "plt.figure(figsize=(30, rows * 5))\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.rcParams['axes.facecolor'] = 'none'\n",
        "plt.rcParams['figure.facecolor'] = 'none'\n",
        "\n",
        "# Define custom x-limits for specific columns\n",
        "xlimits = {\n",
        "    'serum_creatinine': (0, 25),\n",
        "    'sodium': (80, 180),\n",
        "    'potassium': (0, 15),\n",
        "}\n",
        "\n",
        "for i, col in enumerate(numerical.columns, 1):\n",
        "    plt.subplot(rows, cols, i)\n",
        "    sns.histplot(data=disease, x=col, kde=True, hue=\"class_label\", palette=custom_palette, legend=False)\n",
        "    plt.title(col.replace('_', ' ').capitalize(), fontsize=16)\n",
        "    plt.ylabel(\"Count\", fontsize=14)                              # Add y-label\n",
        "    plt.xticks(fontsize=12)\n",
        "    plt.yticks(fontsize=12)\n",
        "    \n",
        "    # Apply custom x-axis range if defined\n",
        "    if col in xlimits:\n",
        "        plt.xlim(xlimits[col])\n",
        "\n",
        "# Add a single legend\n",
        "import matplotlib.patches as mpatches\n",
        "ckd_patch = mpatches.Patch(color=custom_palette['CKD'], label='CKD')\n",
        "nonckd_patch = mpatches.Patch(color=custom_palette['Non-CKD'], label='Non-CKD')\n",
        "plt.figlegend(handles=[ckd_patch, nonckd_patch], loc='upper left', ncol=2, fontsize=12, title=\"CKD Status\")\n",
        "\n",
        "# Titles and layout\n",
        "plt.suptitle(\"Distribution of Key Numerical Features by CKD Class\", fontsize=20, fontweight='bold', y=0.98)\n",
        "plt.tight_layout()\n",
        "plt.subplots_adjust(bottom=0.1, hspace=0.5)\n",
        "\n",
        "plt.savefig(\"numerical_distribution.png\")\n",
        "plt.close()"
      ],
      "id": "Distribution-of-numerical-Features",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {},
      "source": [
        "## <span style=\"font-size: 0.8em;\">Key Clinical Indicators in Patients</span>\n",
        "\n",
        "<p style=\"font-size: 0.60em; text-align: center; color: #444;\">\n",
        "This chart displays the distribution of key clinical variables for CKD and non-CKD patients. \n",
        "</p>\n",
        "\n",
        "![](numerical_distribution.png){width=95% fig-align=\"center\"}\n",
        "\n",
        "<p style=\"font-size: 0.70em; text-align: center; color: #444;\">Common Observations from Routine Health Tests</p>\n",
        "\n",
        "<p style=\"font-size: 0.60em; text-align: left; color: #444; line-height: 1.6em;\">\n",
        "🔹 <strong>Hemoglobin:</strong> Levels persistently <strong>< 10–11 g/dL</strong> may indicate risk of kidney dysfunction.   \n",
        "🔹 <strong>Blood Pressure:</strong> Sustained values > <strong>130/80</strong> mmHg along with abnormal labs suggest kidney function tests may be needed.  \n",
        "🔹 <strong>Sugar & Albumin:</strong> Elevated blood sugar hints at diabetes risk. Increased albumin in urine (proteinuria) is an early CKD indicator.\n",
        "</p>\n",
        "\n",
        "\n",
        "---"
      ],
      "id": "19f91bbf"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## <span style=\"font-size: 0.8em;\">Correlation Heatmap of Clinical Variables</span>\n",
        "\n",
        "\n",
        ":::{.columns}\n",
        "\n",
        "\n",
        "::: {.column width=\"55%\"}"
      ],
      "id": "68082b58"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: heat-map\n",
        "  \n",
        "plt.figure(figsize=(9, 9))\n",
        "sns.heatmap(numerical_columns.corr(), annot=True, cmap='Set2')\n",
        "plt.title(\"Correlation Among Key Clinical Features\", fontsize=14)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "heat-map",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"45%\"}\n",
        "<br>\n",
        "<div style=\"display: flex; flex-direction: column; justify-content: center; height: 100%;\">\n",
        "\n",
        "<p style=\"font-size: 0.5em; text-align: left; color: #444;\">\n",
        "This heatmap shows how different clinical variables are correlated with each other.\n",
        "</p> \n",
        "\n",
        "<p style=\"font-size: 0.5em; text-align: left;\">\n",
        "<b>1. Hemoglobin, Packed Cell Volume, and Red Blood Cell Count</b> show strong positive correlations — reflecting their interconnected role in oxygen transport and anemia, common in CKD.\n",
        "</p>\n",
        "\n",
        "<p style=\"font-size: 0.5em; text-align: left;\">\n",
        "<b>2. Serum Creatinine</b> is negatively correlated with <b>Sodium</b> and <b>Albumin</b>, indicating impaired kidney function affects electrolyte balance and protein retention.\n",
        "</p>\n",
        "\n",
        "</div>\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "---\n",
        "\n",
        "\n",
        "## <span style=\"font-size: 0.8em;\">Exploring Feature Relationships in CKD Patients </span>\n",
        "\n",
        "<p style=\"font-size: 0.50em; text-align: center; color: #444;\">\n",
        "These plots highlight clinical feature pairs that are strongly correlated and vary by CKD status.The separation of CKD vs non-CKD patients in these pairs reveals underlying clinical patterns that can support early detection and diagnosis.\n",
        "</p>\n"
      ],
      "id": "43315125"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Correlated-Feature-Pairs\n",
        "#| fig-align: center\n",
        "\n",
        "pairs = [\n",
        "    ('haemoglobin', 'packed_cell_volume'),\n",
        "    ('packed_cell_volume', 'red_blood_cell_count'),\n",
        "    ('haemoglobin', 'red_blood_cell_count'),\n",
        "    ('sugar', 'blood_glucose_random'),\n",
        "    ('blood_urea', 'red_blood_cell_count'),\n",
        "    ('blood_urea', 'haemoglobin'),\n",
        "    ('albumin', 'haemoglobin'),\n",
        "    ('serum_creatinine', 'sodium')\n",
        "]\n",
        "\n",
        "# Map class values to readable labels\n",
        "disease['class_label'] = disease['class'].map({0: 'CKD', 1: 'Non-CKD'})\n",
        "\n",
        "sns.set_theme(style=\"whitegrid\", palette=\"viridis\")\n",
        "plt.rcParams['axes.facecolor'] = 'none'\n",
        "plt.rcParams['figure.facecolor'] = 'none'\n",
        "\n",
        "n = len(pairs)\n",
        "rows = (n + 1) // 2\n",
        "\n",
        "# Create figure and axes\n",
        "fig, axes = plt.subplots(rows, 4, figsize=(20, rows * 4))\n",
        "axes = axes.flatten()\n",
        "\n",
        "# Placeholder for handles and labels\n",
        "handles, labels = None, None\n",
        "\n",
        "for i, (x, y) in enumerate(pairs):\n",
        "    ax = axes[i]\n",
        "    if x in disease.columns and y in disease.columns:\n",
        "        # Plot with legend only once (first valid pair)\n",
        "        scatter = sns.scatterplot(data=disease, x=x, y=y, hue='class_label',\n",
        "                                  palette='Set1', alpha=0.8, s=60, ax=ax, legend=(handles is None))\n",
        "        sns.regplot(data=disease, x=x, y=y, scatter=False,\n",
        "                    color='black', line_kws={\"linewidth\": 2, \"linestyle\": \"--\"}, ax=ax)\n",
        "\n",
        "        # Save handles for legend once\n",
        "        if handles is None:\n",
        "            handles, labels = scatter.get_legend_handles_labels()\n",
        "\n",
        "        # Title and labels\n",
        "        corr_val = disease[[x, y]].dropna().corr().iloc[0, 1]\n",
        "        ax.set_title(f\"{x.replace('_', ' ').capitalize()} vs {y.replace('_', ' ').capitalize()}\\n(r = {corr_val:.2f})\", fontsize=16)\n",
        "        ax.set_xlabel(x.replace('_', ' ').capitalize(), fontsize=14)\n",
        "        ax.set_ylabel(y.replace('_', ' ').capitalize(), fontsize=14)\n",
        "\n",
        "# Remove any unused subplots\n",
        "for j in range(i + 1, len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "# Add shared legend if we captured one\n",
        "if handles and labels:\n",
        "    fig.legend(handles, labels, loc='upper right', ncol=2, fontsize=12, title=\"CKD Status\")\n",
        "\n",
        "# Super title and spacing\n",
        "plt.suptitle('CKD Dataset – Strongly Correlated Feature Pairs with Class Highlighting', fontsize=20, y=1.03)\n",
        "plt.tight_layout()\n",
        "plt.subplots_adjust(top=0.92, bottom=0.12)\n",
        "plt.show()"
      ],
      "id": "Correlated-Feature-Pairs",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## <span style=\"font-size: 0.8em;\">Building a Machine Learning Model for CKD Prediction</span>\n",
        "\n",
        "<p style=\"font-size: 0.6em; text-align: left;\"> Based on our exploratory data analysis, we selected a focused set of features that showed strong correlation with CKD and had clinical relevance in early diagnosis. </p> \n",
        "\n",
        "<p style=\"font-size: 0.6em; text-align: left;\"> We define our modeling variables as: </p>\n"
      ],
      "id": "03002410"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: X-Y-display\n",
        "#| echo: true\n",
        "#| eval: false\n",
        "\n",
        "X = disease[['red_blood_cell_count', 'packed_cell_volume', 'haemoglobin', 'albumin', 'specific_gravity']]\n",
        "y = disease['class']"
      ],
      "id": "X-Y-display",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<p style=\"font-size: 0.6em; text-align: left;\"> The objective is to build a simple, interpretable machine learning model that can assist in CKD detection using just these five features. </p> \n",
        "\n",
        "<div style=\"background-color: #e6f4ea; color: #1b5e20; padding: 10px 15px; font-size: 0.6em; border-left: 5px solid #2e7d32; border-radius: 8px;\">\n",
        "✅ Clinically meaningful features<br>\n",
        "✅ Minimal but strong predictors<br>\n",
        "✅ Useful in real-world check-ups<br>\n",
        "✅ Balanced for interpretability\n",
        "</div>\n"
      ],
      "id": "383a3d37"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Model-Building\n",
        "#| eval: false\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "\n",
        "# Features selected based on exploratory analysis\n",
        "X = disease[['red_blood_cell_count', 'packed_cell_volume', 'haemoglobin', 'albumin', 'specific_gravity']]\n",
        "y = disease['class']\n",
        "\n",
        "# Handle missing values (using mean imputation for simplicity)\n",
        "X = X.fillna(X.mean())\n",
        "\n",
        "# Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "#-------SVM---------\n",
        "\n",
        "svm_rbf = SVC(kernel='rbf', random_state=42)\n",
        "svm_rbf.fit(X_train, y_train)\n",
        "svm_preds = svm_rbf.predict(X_test)\n",
        "\n",
        "print(\"SVM (RBF) Accuracy:\", accuracy_score(y_test, svm_preds))\n",
        "print(confusion_matrix(y_test, svm_preds))\n",
        "print(classification_report(y_test, svm_preds))\n",
        "\n",
        "\n",
        "# --- KNN Model ---\n",
        "knn = KNeighborsClassifier()\n",
        "knn.fit(X_train, y_train)\n",
        "\n",
        "# Evaluation\n",
        "knn_preds = knn.predict(X_test)\n",
        "print(f\"KNN Accuracy: {accuracy_score(y_test, knn_preds):.2f}\")\n",
        "print(\"KNN Confusion Matrix:\\n\", confusion_matrix(y_test, knn_preds))\n",
        "print(\"KNN Classification Report:\\n\", classification_report(y_test, knn_preds))\n",
        "\n",
        "\n",
        "# --- Decision Tree Classifier ---\n",
        "dtc = DecisionTreeClassifier()\n",
        "dtc.fit(X_train, y_train)\n",
        "\n",
        "# Evaluation\n",
        "dtc_preds = dtc.predict(X_test)\n",
        "print(f\"\\nDecision Tree Accuracy: {accuracy_score(y_test, dtc_preds):.2f}\")\n",
        "print(\"Decision Tree Confusion Matrix:\\n\", confusion_matrix(y_test, dtc_preds))\n",
        "print(\"Decision Tree Classification Report:\\n\", classification_report(y_test, dtc_preds))"
      ],
      "id": "Model-Building",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## <span style=\"font-size: 0.8em;\">Modeling Decisions: What We Tried & Why?</span>\n",
        "\n",
        " <p style=\"font-size: 0.6em; text-align: left; color: #444;\">\n",
        "We tested three key machine learning models to understand their strengths in detecting CKD using core clinical features:\n",
        "</p>\n",
        "\n",
        "<ul style=\"font-size: 0.6em; color: #444;\">\n",
        "  <li><b>K-Nearest Neighbors (KNN):</b> Performed well and was simple to implement, but slightly sensitive to local data variations.</li>\n",
        "  <li><b>Decision Tree:</b> Showed high accuracy and was easy to interpret — a major advantage in clinical settings.</li>\n",
        "  <li><b>SVM (RBF Kernel):</b> Handled nonlinear patterns well but lacked transparency in how predictions were made.</li>\n",
        "</ul>\n",
        "\n",
        "<p style=\"font-size: 0.6em; text-align: left; color: #444;\">\n",
        "From this, we learned that while all models had strengths, <b>Decision Tree</b> offered the best balance of performance and explainability for early CKD detection.\n",
        "</p>\n",
        "\n",
        "\n",
        "## <span style=\"font-size: 0.8em;\">Model Comparison: Accuracy & Insights</span>\n",
        "<br>\n",
        "<pre style=\"font-size: 0.55em; text-align: left; background-color: #e6f4ea; padding: 8px 12px; border-radius: 5px; border: 1px solid #ccc; max-width: 600px; margin: 10px auto;\">\n",
        "1 dtc = DecisionTreeClassifier(random_state=42)\n",
        "2 dtc.fit(X_train, y_train)\n",
        "</pre>\n",
        "\n",
        "<table style=\"font-size: 0.6em; margin: auto; border-collapse: collapse; width: 95%;\">\n",
        "  <thead>\n",
        "    <tr style=\"background-color: #f0f0f0;\">\n",
        "      <th style=\"padding: 8px; border: 1px solid #ccc;\">Model</th>\n",
        "      <th style=\"padding: 8px; border: 1px solid #ccc;\">Accuracy</th>\n",
        "      <th style=\"padding: 8px; border: 1px solid #ccc;\">Precision</th>\n",
        "      <th style=\"padding: 8px; border: 1px solid #ccc;\">Recall</th>\n",
        "      <th style=\"padding: 8px; border: 1px solid #ccc;\">F1-Score</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">SVM (RBF Kernel)</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">91%</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">0.90</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">0.91</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">0.90</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">K-Nearest Neighbors</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">95%</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">0.94</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">0.95</td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\">0.95</td>\n",
        "    </tr>\n",
        "    <tr style=\"background-color:rgb(216, 238, 218);\">\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\"><b>Decision Tree </b></td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\"><b>99%</b></td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\"><b>0.99</b></td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\"><b>0.98</b></td>\n",
        "      <td style=\"padding: 8px; border: 1px solid #ccc;\"><b>0.99</b></td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<br>\n",
        "<div style=\"background-color: #e6f4ea; border-left: 5px solid #1b5e20; padding: 12px 16px; border-radius: 6px; width: fit-content; margin: auto;\">\n",
        "  <p style=\"font-size: 0.55em; text-align: center; color: #444; margin: 0;\">\n",
        "    Based on accuracy and interpretability, <b>Decision Tree</b> was chosen as our final model for early CKD detection.\n",
        "  </p>\n",
        "</div>\n",
        "\n",
        "---\n",
        "\n",
        "## <span style=\"font-size: 0.6em;\">Model Comparison: Accuracy, F1-Score & Interpretability</span>\n",
        "\n",
        ":::{.columns} \n",
        "\n",
        "::: {.column width=\"50%\"}\n"
      ],
      "id": "fc3e7f71"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Define model metrics\n",
        "labels = ['Accuracy', 'F1 Score', 'Interpretability']\n",
        "num_vars = len(labels)\n",
        "\n",
        "# Normalized scores (0–10 scale)\n",
        "knn = [9.5, 9.5, 8]\n",
        "dt = [10, 10, 10]\n",
        "svm = [9.1, 9.0, 4]\n",
        "\n",
        "# Prepare data\n",
        "data = [knn, dt, svm]\n",
        "model_names = ['KNN', 'Decision Tree', 'SVM (RBF)']\n",
        "colors = ['#1f77b4', '#2ca02c', '#d62728']\n",
        "angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n",
        "angles += angles[:1]\n",
        "\n",
        "# Close the polygon\n",
        "for i in range(len(data)):\n",
        "    data[i] += data[i][:1]\n",
        "\n",
        "# Radar chart\n",
        "fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n",
        "\n",
        "for i, d in enumerate(data):\n",
        "    ax.plot(angles, d, color=colors[i], linewidth=2, label=model_names[i])\n",
        "    ax.fill(angles, d, color=colors[i], alpha=0.25)\n",
        "\n",
        "ax.set_theta_offset(np.pi / 2)\n",
        "ax.set_theta_direction(-1)\n",
        "ax.set_thetagrids(np.degrees(angles[:-1]), labels)\n",
        "ax.set_ylim(0, 10)\n",
        "ax.set_title(\"Model Comparison Radar Chart\", fontsize=16, weight='bold', y=1.08)\n",
        "ax.legend(loc='upper right', bbox_to_anchor=(1.2, 1.1))\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "3e964393",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "<p style=\"font-size: 70%; color: #444;\"> <strong>Decision Tree</strong> leads with perfect accuracy and interpretability, making it ideal for clinical deployment. <br>\n",
        "<strong>KNN</strong> performs well and is simple, but less interpretable than DT in complex cases. <br>\n",
        "<strong>SVM</strong> offers good predictive power, but its lack of transparency limits its usefulness in healthcare.<br>\n",
        "Overall, Decision Tree balances performance and explainability — perfect for medical use-cases.\n",
        "</p>\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## <span style=\"font-size: 0.8em;\">Confusion Matrix: KNN vs Decision Tree vs SVM</span>\n",
        "\n",
        "<br>\n"
      ],
      "id": "0b342dd4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: confusion-matrix-plot\n",
        "#| fig-align: center\n",
        "\n",
        "# Train/test split & feature setup\n",
        "X = disease[['red_blood_cell_count', 'packed_cell_volume', 'haemoglobin', 'albumin', 'specific_gravity']]\n",
        "y = disease['class']\n",
        "X = X.fillna(X.mean())\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Import classifiers and libraries\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Train models\n",
        "knn = KNeighborsClassifier()\n",
        "knn.fit(X_train, y_train)\n",
        "\n",
        "dtc = DecisionTreeClassifier()\n",
        "dtc.fit(X_train, y_train)\n",
        "\n",
        "svm_rbf = SVC(kernel='rbf', random_state=42)\n",
        "svm_rbf.fit(X_train, y_train)\n",
        "\n",
        "# Predict\n",
        "knn_preds = knn.predict(X_test)\n",
        "dtc_preds = dtc.predict(X_test)\n",
        "svm_preds = svm_rbf.predict(X_test)\n",
        "\n",
        "# Confusion matrices\n",
        "knn_cm = confusion_matrix(y_test, knn_preds)\n",
        "dtc_cm = confusion_matrix(y_test, dtc_preds)\n",
        "svm_cm = confusion_matrix(y_test, svm_preds)\n",
        "\n",
        "# Plotting\n",
        "fig, axes = plt.subplots(1, 3, figsize=(18, 5))\n",
        "titles = ['KNN Confusion Matrix', 'Decision Tree Confusion Matrix', 'SVM (RBF) Confusion Matrix']\n",
        "cms = [knn_cm, dtc_cm, svm_cm]\n",
        "cmaps = ['YlGnBu', 'YlOrRd', 'PuBuGn']\n",
        "\n",
        "for ax, cm, title, cmap in zip(axes, cms, titles, cmaps):\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap=cmap, cbar=False,\n",
        "                xticklabels=['CKD', 'Non-CKD'], yticklabels=['CKD', 'Non-CKD'],\n",
        "                annot_kws={\"size\": 14}, ax=ax)\n",
        "    ax.set_title(title, fontsize=14, weight='bold')\n",
        "    ax.set_xlabel('Predicted Label', fontsize=12)\n",
        "    ax.set_ylabel('Actual Label', fontsize=12)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"confusion_matrices_all.png\", dpi=300, bbox_inches='tight', facecolor='white')\n",
        "plt.show()"
      ],
      "id": "confusion-matrix-plot",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<br>\n",
        "\n",
        "<p style=\"font-size: 0.55em; text-align: center; color: #444;\">\n",
        "The Decision Tree model shows fewer misclassifications and better separation between CKD and Non-CKD cases.\n",
        "</p>\n",
        "\n",
        "---\n",
        "\n",
        "## Thank You!  {.center}\n",
        "\n",
        "<p style=\"text-align: center; font-size: 1.3em; color: #2c3e50; font-weight: bold;\">\n",
        "Early detection isn't just a technical solution — it’s a human one.  \n",
        "</p>\n",
        "\n",
        "<p style=\"text-align: center; font-size: 1em; color: #444;\">\n",
        "Through this project, we explored how <strong>data-driven insights</strong> and <strong>machine learning</strong>  \n",
        "can support timely diagnosis and improve patient outcomes in Chronic Kidney Disease.\n",
        "</p>\n",
        "\n",
        "<hr style=\"width: 60%; margin: 20px auto; border: 0.5px solid #ccc;\">\n",
        "\n",
        "<p style=\"text-align: center; font-size: 0.95em; color: #555;\">\n",
        "Have questions or feedback? We'd love to hear from you!  \n",
        "</p>\n",
        "\n",
        "<p style=\"text-align: center; font-size: 0.85em; color: #888;\">\n",
        "Presented by: <strong>Shreemithra Naveen</strong> & <strong>Sai Laasya Gorantla</strong>  \n",
        "<br>\n",
        "INFO 511 – University of Arizona | April 2025\n",
        "</p>\n"
      ],
      "id": "72ccdf5d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "c:\\Users\\shree\\ckd-diagnosis-visualized\\.venv\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}